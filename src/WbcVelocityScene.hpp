#ifndef WBCVELOCITYSCENE_HPP
#define WBCVELOCITYSCENE_HPP

#include "WbcScene.hpp"
#include "OptProblem.hpp"
#include <base/samples/RigidBodyState.hpp>

namespace wbc{

class WbcVelocityScene : public WbcScene{
protected:
    base::VectorXd solver_output;
    HierarchicalWeightedLS opt_problem;

    /**
     * @brief Create a constraint and add it to the WBC scene
     */
    virtual Constraint* createConstraint(const ConstraintConfig &config);

public:
    WbcVelocityScene(RobotModel* robot_model, Solver* solver) :
        WbcScene(robot_model, solver){}
    virtual ~WbcVelocityScene(){}

    /**
     * @brief Update the wbc scene with the (updated) robot model and return the current solver output
     * @param ctrl_output Control solution that fulfill the given constraints as good as possible. In this case only the speed entries will be filled.
     */
    virtual void solve(base::commands::Joints& ctrl_output);

    /**
     * @brief Compute y and y_solution for each constraint. y_solution denotes the constraint velocity that can be achieved
     *  with the solution generated by the solver and y denotes the actual joint velocity achieved by the robot.
     *  Both values can be used to evaluate the performance of WBC
     */
    void evaluateConstraints(const base::VectorXd& solver_output, const base::VectorXd& robot_vel);

    /** @brief Return current control solution*/
    base::VectorXd getSolverOutput(){return solver_output;}
};

} // namespace wbc

#endif
